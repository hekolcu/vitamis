name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Get New Connection String
        id: get_connection_string
        run: |
          echo "::set-output name=connection_string::${{ secrets.PROD_CONNECTION_STRING }}"
      - name: Update Connection String
        run: |
          cd backend/VitamisAPI
          sed -i 's|"DefaultConnection":.*|"DefaultConnection": "${{ steps.get_connection_string.outputs.connection_string }}"|g' appsettings.json
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: vitamisapi
          IMAGE_TAG: latest
        run: |
          cd backend
          docker build -f VitamisAPI/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      - name: Deploy to EC2 via SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Execute deployment commands
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: vitamisapi
          IMAGE_TAG: latest
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.BACKEND_HOST }} << EOF
            echo "Configuring AWS CLI"
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set default.region eu-central-1
            aws configure set default.output json
            echo "Logging into Amazon ECR"
            aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin $ECR_REGISTRY
            docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            docker stop my-app-container
            docker rm my-app-container
            docker run -d --name my-app-container -v /home/ubuntu/DieticianFiles:/app/Data/DieticianDocuments -p 3000:8080 $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          EOF